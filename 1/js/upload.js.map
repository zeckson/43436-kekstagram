{"version":3,"sources":["webpack:///webpack/bootstrap 9574151042b32c84ea4b?cccb*","webpack:///./src/js/upload.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,cAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAY;AACZ;AACA;;AAEA;AACA,aAAY;AACZ;AACA;;AAEA;AACA;AACA,aAAY;AACZ;AACA;;AAEA;AACA,8BAA6B,cAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAY;AACZ;AACA;;AAEA;AACA;AACA,aAAY;AACZ;AACA;;AAEA;AACA;AACA,aAAY;AACZ;AACA;;AAEA;AACA,aAAY;AACZ;AACA;;AAEA;AACA,aAAY;AACZ;AACA;;AAEA;AACA,cAAa,OAAO;AACpB,cAAa,QAAQ;AACrB,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,kDAAiD;AACjD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa,MAAM;AACnB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa,MAAM;AACnB;AACA;AACA;;AAEA;AACA;;AAEA;AACA,sBAAqB,uBAAuB;AAC5C;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa,MAAM;AACnB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa,MAAM;AACnB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,EAAC","file":"js/upload.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 9574151042b32c84ea4b\n **/","/* global Resizer: true */\n\n/**\n * @fileoverview\n * @author Igor Alexeenko (o0)\n */\n\n'use strict';\n\n(function() {\n  /** @enum {string} */\n  var FileType = {\n    'GIF': '',\n    'JPEG': '',\n    'PNG': '',\n    'SVG+XML': ''\n  };\n\n  /** @enum {number} */\n  var Action = {\n    ERROR: 0,\n    UPLOADING: 1,\n    CUSTOM: 2\n  };\n\n  /**\n   * Регулярное выражение, проверяющее тип загружаемого файла. Составляется\n   * из ключей FileType.\n   * @type {RegExp}\n   */\n  var fileRegExp = new RegExp('^image/(' + Object.keys(FileType).join('|').replace('\\+', '\\\\+') + ')$', 'i');\n\n  /**\n   * @type {Object.<string, string>}\n   */\n  var filterMap;\n\n  /**\n   * Объект, который занимается кадрированием изображения.\n   * @type {Resizer}\n   */\n  var currentResizer;\n\n  /**\n   * Удаляет текущий объект {@link Resizer}, чтобы создать новый с другим\n   * изображением.\n   */\n  var cleanupResizer = function() {\n    if (currentResizer) {\n      currentResizer.remove();\n      currentResizer = null;\n    }\n  };\n\n  /**\n   * Ставит одну из трех случайных картинок на фон формы загрузки.\n   */\n  var updateBackground = function() {\n    var images = [\n      'img/logo-background-1.jpg',\n      'img/logo-background-2.jpg',\n      'img/logo-background-3.jpg'\n    ];\n\n    var backgroundElement = document.querySelector('.upload');\n    var randomImageNumber = Math.round(Math.random() * (images.length - 1));\n    backgroundElement.style.backgroundImage = 'url(' + images[randomImageNumber] + ')';\n  };\n\n  /**\n   * Проверяет, валидны ли данные, в форме кадрирования.\n   * @return {boolean}\n   */\n  var resizeFormIsValid = function() {\n    return true;\n  };\n\n  /**\n   * Форма загрузки изображения.\n   * @type {HTMLFormElement}\n   */\n  var uploadForm = document.forms['upload-select-image'];\n\n  /**\n   * Форма кадрирования изображения.\n   * @type {HTMLFormElement}\n   */\n  var resizeForm = document.forms['upload-resize'];\n\n  /**\n   * Форма добавления фильтра.\n   * @type {HTMLFormElement}\n   */\n  var filterForm = document.forms['upload-filter'];\n\n  /**\n   * @type {HTMLImageElement}\n   */\n  var filterImage = filterForm.querySelector('.filter-image-preview');\n\n  /**\n   * @type {HTMLElement}\n   */\n  var uploadMessage = document.querySelector('.upload-message');\n\n  /**\n   * @param {Action} action\n   * @param {string=} message\n   * @return {Element}\n   */\n  var showMessage = function(action, message) {\n    var isError = false;\n\n    switch (action) {\n      case Action.UPLOADING:\n        message = message || 'Кексограмим&hellip;';\n        break;\n\n      case Action.ERROR:\n        isError = true;\n        message = message || 'Неподдерживаемый формат файла<br> <a href=\"' + document.location + '\">Попробовать еще раз</a>.';\n        break;\n    }\n\n    uploadMessage.querySelector('.upload-message-container').innerHTML = message;\n    uploadMessage.classList.remove('invisible');\n    uploadMessage.classList.toggle('upload-message-error', isError);\n    return uploadMessage;\n  };\n\n  var hideMessage = function() {\n    uploadMessage.classList.add('invisible');\n  };\n\n  /**\n   * Обработчик изменения изображения в форме загрузки. Если загруженный\n   * файл является изображением, считывается исходник картинки, создается\n   * Resizer с загруженной картинкой, добавляется в форму кадрирования\n   * и показывается форма кадрирования.\n   * @param {Event} evt\n   */\n  uploadForm.onchange = function(evt) {\n    var element = evt.target;\n    if (element.id === 'upload-file') {\n      // Проверка типа загружаемого файла, тип должен быть изображением\n      // одного из форматов: JPEG, PNG, GIF или SVG.\n      if (fileRegExp.test(element.files[0].type)) {\n        var fileReader = new FileReader();\n\n        showMessage(Action.UPLOADING);\n\n        fileReader.onload = function() {\n          cleanupResizer();\n\n          currentResizer = new Resizer(fileReader.result);\n          currentResizer.setElement(resizeForm);\n          uploadMessage.classList.add('invisible');\n\n          uploadForm.classList.add('invisible');\n          resizeForm.classList.remove('invisible');\n\n          hideMessage();\n        };\n\n        fileReader.readAsDataURL(element.files[0]);\n      } else {\n        // Показ сообщения об ошибке, если формат загружаемого файла не поддерживается\n        showMessage(Action.ERROR);\n      }\n    }\n  };\n\n  /**\n   * Обработка сброса формы кадрирования. Возвращает в начальное состояние\n   * и обновляет фон.\n   * @param {Event} evt\n   */\n  resizeForm.onreset = function(evt) {\n    evt.preventDefault();\n\n    cleanupResizer();\n    updateBackground();\n\n    resizeForm.classList.add('invisible');\n    uploadForm.classList.remove('invisible');\n  };\n\n  /**\n   * Обработка отправки формы кадрирования. Если форма валидна, экспортирует\n   * кропнутое изображение в форму добавления фильтра и показывает ее.\n   * @param {Event} evt\n   */\n  resizeForm.onsubmit = function(evt) {\n    evt.preventDefault();\n\n    if (resizeFormIsValid()) {\n      var image = currentResizer.exportImage().src;\n\n      var thumbnails = filterForm.querySelectorAll('.upload-filter-preview');\n      for (var i = 0; i < thumbnails.length; i++) {\n        thumbnails[i].style.backgroundImage = 'url(' + image + ')';\n      }\n\n      filterImage.src = image;\n\n      resizeForm.classList.add('invisible');\n      filterForm.classList.remove('invisible');\n    }\n  };\n\n  /**\n   * Сброс формы фильтра. Показывает форму кадрирования.\n   * @param {Event} evt\n   */\n  filterForm.onreset = function(evt) {\n    evt.preventDefault();\n\n    filterForm.classList.add('invisible');\n    resizeForm.classList.remove('invisible');\n  };\n\n  /**\n   * Отправка формы фильтра. Возвращает в начальное состояние, предварительно\n   * записав сохраненный фильтр в cookie.\n   * @param {Event} evt\n   */\n  filterForm.onsubmit = function(evt) {\n    evt.preventDefault();\n\n    cleanupResizer();\n    updateBackground();\n\n    filterForm.classList.add('invisible');\n    uploadForm.classList.remove('invisible');\n  };\n\n  /**\n   * Обработчик изменения фильтра. Добавляет класс из filterMap соответствующий\n   * выбранному значению в форме.\n   */\n  filterForm.onchange = function() {\n    if (!filterMap) {\n      // Ленивая инициализация. Объект не создается до тех пор, пока\n      // не понадобится прочитать его в первый раз, а после этого запоминается\n      // навсегда.\n      filterMap = {\n        'none': 'filter-none',\n        'chrome': 'filter-chrome',\n        'sepia': 'filter-sepia',\n        'marvin': 'filter-marvin'\n      };\n    }\n\n    var selectedFilter = [].filter.call(filterForm['upload-filter'], function(item) {\n      return item.checked;\n    })[0].value;\n\n    // Класс перезаписывается, а не обновляется через classList потому что нужно\n    // убрать предыдущий примененный класс. Для этого нужно или запоминать его\n    // состояние или просто перезаписывать.\n    filterImage.className = 'filter-image-preview ' + filterMap[selectedFilter];\n  };\n\n  cleanupResizer();\n  updateBackground();\n})();\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/js/upload.js\n ** module id = 0\n ** module chunks = 2\n **/"],"sourceRoot":""}