{"version":3,"sources":["webpack:///webpack/bootstrap 01ce5c2d1ebb02c6cc58?df55*","webpack:///./src/js/resizer.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;;AAEA;AACA;AACA;AACA,cAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAgB;AAChB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB,gBAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA,gBAAe,OAAO;AACtB,gBAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA,gBAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA,gBAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA,gBAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA,iBAAgB;AAChB;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA,gBAAe,OAAO;AACtB,gBAAe,OAAO;AACtB,gBAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA,gBAAe,OAAO;AACtB,gBAAe,OAAO;AACtB,gBAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA,iBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa,OAAO;AACpB,cAAa,OAAO;AACpB,cAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa,OAAO;AACpB,cAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAC","file":"js/resizer.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 01ce5c2d1ebb02c6cc58\n **/","'use strict';\n\n(function() {\n  /**\n   * @constructor\n   * @param {string} image\n   */\n  var Resizer = function(image) {\n    // Изображение, с которым будет вестись работа.\n    this._image = new Image();\n    this._image.src = image;\n\n    // Холст.\n    this._container = document.createElement('canvas');\n    this._ctx = this._container.getContext('2d');\n\n    // Создаем холст только после загрузки изображения.\n    this._image.onload = function() {\n      // Размер холста равен размеру загруженного изображения. Это нужно\n      // для удобства работы с координатами.\n      this._container.width = this._image.naturalWidth;\n      this._container.height = this._image.naturalHeight;\n\n      /**\n       * Предлагаемый размер кадра в виде коэффициента относительно меньшей\n       * стороны изображения.\n       * @const\n       * @type {number}\n       */\n      var INITIAL_SIDE_RATIO = 0.75;\n\n      // Размер меньшей стороны изображения.\n      var side = Math.min(\n          this._container.width * INITIAL_SIDE_RATIO,\n          this._container.height * INITIAL_SIDE_RATIO);\n\n      // Изначально предлагаемое кадрирование — часть по центру с размером в 3/4\n      // от размера меньшей стороны.\n      this._resizeConstraint = new Square(\n          this._container.width / 2 - side / 2,\n          this._container.height / 2 - side / 2,\n          side);\n\n      // Отрисовка изначального состояния канваса.\n      this.setConstraint();\n    }.bind(this);\n\n    // Фиксирование контекста обработчиков.\n    this._onDragStart = this._onDragStart.bind(this);\n    this._onDragEnd = this._onDragEnd.bind(this);\n    this._onDrag = this._onDrag.bind(this);\n  };\n\n  Resizer.prototype = {\n    /**\n     * Родительский элемент канваса.\n     * @type {Element}\n     * @private\n     */\n    _element: null,\n\n    /**\n     * Положение курсора в момент перетаскивания. От положения курсора\n     * рассчитывается смещение на которое нужно переместить изображение\n     * за каждую итерацию перетаскивания.\n     * @type {Coordinate}\n     * @private\n     */\n    _cursorPosition: null,\n\n    /**\n     * Объект, хранящий итоговое кадрирование: сторона квадрата и смещение\n     * от верхнего левого угла исходного изображения.\n     * @type {Square}\n     * @private\n     */\n    _resizeConstraint: null,\n\n    /**\n     * Отрисовка канваса.\n     */\n    redraw: function() {\n      // Очистка изображения.\n      this._ctx.clearRect(0, 0, this._container.width, this._container.height);\n\n      // Параметры линии.\n      // NB! Такие параметры сохраняются на время всего процесса отрисовки\n      // canvas'a поэтому важно вовремя поменять их, если нужно начать отрисовку\n      // чего-либо с другой обводкой.\n\n      // Толщина линии.\n      this._ctx.lineWidth = 6;\n      // Цвет обводки.\n      this._ctx.strokeStyle = '#ffe753';\n      // Размер штрихов. Первый элемент массива задает длину штриха, второй\n      // расстояние между соседними штрихами.\n      this._ctx.setLineDash([15, 10]);\n      // Смещение первого штриха от начала линии.\n      this._ctx.lineDashOffset = 7;\n\n      // Сохранение состояния канваса.\n      this._ctx.save();\n\n      // Установка начальной точки системы координат в центр холста.\n      this._ctx.translate(this._container.width / 2, this._container.height / 2);\n\n      var displX = -(this._resizeConstraint.x + this._resizeConstraint.side / 2);\n      var displY = -(this._resizeConstraint.y + this._resizeConstraint.side / 2);\n      // Отрисовка изображения на холсте. Параметры задают изображение, которое\n      // нужно отрисовать и координаты его верхнего левого угла.\n      // Координаты задаются от центра холста.\n      this._ctx.drawImage(this._image, displX, displY);\n\n      // Отрисовка прямоугольника, обозначающего область изображения после\n      // кадрирования. Координаты задаются от центра.\n      this._ctx.strokeRect(\n          (-this._resizeConstraint.side / 2) - this._ctx.lineWidth / 2,\n          (-this._resizeConstraint.side / 2) - this._ctx.lineWidth / 2,\n          this._resizeConstraint.side - this._ctx.lineWidth / 2,\n          this._resizeConstraint.side - this._ctx.lineWidth / 2);\n\n      // Восстановление состояния канваса, которое было до вызова ctx.save\n      // и последующего изменения системы координат. Нужно для того, чтобы\n      // следующий кадр рисовался с привычной системой координат, где точка\n      // 0 0 находится в левом верхнем углу холста, в противном случае\n      // некорректно сработает даже очистка холста или нужно будет использовать\n      // сложные рассчеты для координат прямоугольника, который нужно очистить.\n      this._ctx.restore();\n    },\n\n    /**\n     * Включение режима перемещения. Запоминается текущее положение курсора,\n     * устанавливается флаг, разрешающий перемещение и добавляются обработчики,\n     * позволяющие перерисовывать изображение по мере перетаскивания.\n     * @param {number} x\n     * @param {number} y\n     * @private\n     */\n    _enterDragMode: function(x, y) {\n      this._cursorPosition = new Coordinate(x, y);\n      document.body.addEventListener('mousemove', this._onDrag);\n      document.body.addEventListener('mouseup', this._onDragEnd);\n    },\n\n    /**\n     * Выключение режима перемещения.\n     * @private\n     */\n    _exitDragMode: function() {\n      this._cursorPosition = null;\n      document.body.removeEventListener('mousemove', this._onDrag);\n      document.body.removeEventListener('mouseup', this._onDragEnd);\n    },\n\n    /**\n     * Перемещение изображения относительно кадра.\n     * @param {number} x\n     * @param {number} y\n     * @private\n     */\n    updatePosition: function(x, y) {\n      this.moveConstraint(\n          this._cursorPosition.x - x,\n          this._cursorPosition.y - y);\n      this._cursorPosition = new Coordinate(x, y);\n    },\n\n    /**\n     * @param {MouseEvent} evt\n     * @private\n     */\n    _onDragStart: function(evt) {\n      this._enterDragMode(evt.clientX, evt.clientY);\n    },\n\n    /**\n     * Обработчик окончания перетаскивания.\n     * @private\n     */\n    _onDragEnd: function() {\n      this._exitDragMode();\n    },\n\n    /**\n     * Обработчик события перетаскивания.\n     * @param {MouseEvent} evt\n     * @private\n     */\n    _onDrag: function(evt) {\n      this.updatePosition(evt.clientX, evt.clientY);\n    },\n\n    /**\n     * Добавление элемента в DOM.\n     * @param {Element} element\n     */\n    setElement: function(element) {\n      if (this._element === element) {\n        return;\n      }\n\n      this._element = element;\n      this._element.insertBefore(this._container, this._element.firstChild);\n      // Обработчики начала и конца перетаскивания.\n      this._container.addEventListener('mousedown', this._onDragStart);\n    },\n\n    /**\n     * Возвращает кадрирование элемента.\n     * @return {Square}\n     */\n    getConstraint: function() {\n      return this._resizeConstraint;\n    },\n\n    /**\n     * Смещает кадрирование на значение указанное в параметрах.\n     * @param {number} deltaX\n     * @param {number} deltaY\n     * @param {number} deltaSide\n     */\n    moveConstraint: function(deltaX, deltaY, deltaSide) {\n      this.setConstraint(\n          this._resizeConstraint.x + (deltaX || 0),\n          this._resizeConstraint.y + (deltaY || 0),\n          this._resizeConstraint.side + (deltaSide || 0));\n    },\n\n    /**\n     * @param {number} x\n     * @param {number} y\n     * @param {number} side\n     */\n    setConstraint: function(x, y, side) {\n      if (typeof x !== 'undefined') {\n        this._resizeConstraint.x = x;\n      }\n\n      if (typeof y !== 'undefined') {\n        this._resizeConstraint.y = y;\n      }\n\n      if (typeof side !== 'undefined') {\n        this._resizeConstraint.side = side;\n      }\n\n      requestAnimationFrame(function() {\n        this.redraw();\n        var resizerChangeEvent = document.createEvent('CustomEvent');\n        resizerChangeEvent.initEvent('resizerchange', false, false);\n        window.dispatchEvent(resizerChangeEvent);\n      }.bind(this));\n    },\n\n    /**\n     * Удаление. Убирает контейнер из родительского элемента, убирает\n     * все обработчики событий и убирает ссылки.\n     */\n    remove: function() {\n      this._element.removeChild(this._container);\n\n      this._container.removeEventListener('mousedown', this._onDragStart);\n      this._container = null;\n    },\n\n    /**\n     * Экспорт обрезанного изображения как HTMLImageElement и исходником\n     * картинки в src в формате dataURL.\n     * @return {Image}\n     */\n    exportImage: function() {\n      // Создаем Image, с размерами, указанными при кадрировании.\n      var imageToExport = new Image();\n\n      // Создается новый canvas, по размерам совпадающий с кадрированным\n      // изображением, в него добавляется изображение взятое из канваса\n      // с измененными координатами и сохраняется в dataURL, с помощью метода\n      // toDataURL. Полученный исходный код, записывается в src у ранее\n      // созданного изображения.\n      var temporaryCanvas = document.createElement('canvas');\n      var temporaryCtx = temporaryCanvas.getContext('2d');\n      temporaryCanvas.width = this._resizeConstraint.side;\n      temporaryCanvas.height = this._resizeConstraint.side;\n      temporaryCtx.drawImage(this._image,\n          -this._resizeConstraint.x,\n          -this._resizeConstraint.y);\n      imageToExport.src = temporaryCanvas.toDataURL('image/png');\n\n      return imageToExport;\n    }\n  };\n\n  /**\n   * Вспомогательный тип, описывающий квадрат.\n   * @constructor\n   * @param {number} x\n   * @param {number} y\n   * @param {number} side\n   * @private\n   */\n  var Square = function(x, y, side) {\n    this.x = x;\n    this.y = y;\n    this.side = side;\n  };\n\n  /**\n   * Вспомогательный тип, описывающий координату.\n   * @constructor\n   * @param {number} x\n   * @param {number} y\n   * @private\n   */\n  var Coordinate = function(x, y) {\n    this.x = x;\n    this.y = y;\n  };\n\n  window.Resizer = Resizer;\n})();\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/js/resizer.js\n ** module id = 0\n ** module chunks = 2\n **/"],"sourceRoot":""}